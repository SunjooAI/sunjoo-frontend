{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\Desktop\\\\BeJuRyu\\\\2023_1_WAT_BeJuRyu\\\\front\\\\src\\\\components\\\\History\\\\History.jsx\",\n  _s = $RefreshSig$();\n/* TODO\r\n1. [o] 주류 히스토리 페이지 대략적으로 어떻게 구현할 건지 UI*/\n\n// 리스트 형식으로 들어가고 onclick 시키게끔 깔끔하게 고\nimport S from \"./styled\";\nimport { useNavigate, useLocaion } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport authClient from \"../../apis/authClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction History() {\n  _s();\n  const navigate = useNavigate();\n\n  // 추천결과 리스트\n  const [recommendList, setRecommendList] = useState([]);\n  // 리스트 길이에 따라 pagination\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(10);\n  const totalPages = Math.ceil(recommendList.length / perPage);\n\n  // 현재 페이지에 해당하는 항목들만 추출하는 함수\n  const getCurrentPageItems = () => {\n    const startIndex = (page - 1) * perPage;\n    const endIndex = startIndex + perPage;\n    return recommendList.slice(startIndex, endIndex);\n  };\n\n  // 다음 페이지로 이동하는 함수\n  const goToNextPage = () => {\n    if (page < totalPages) {\n      setPage(page + 1);\n    }\n  };\n\n  // 이전 페이지로 이동하는 함수\n  const goToPreviousPage = () => {\n    if (page > 1) {\n      setPage(page - 1);\n    }\n  };\n  useEffect(() => {\n    const reviewList = async () => {\n      try {\n        const response = await authClient({\n          method: \"get\",\n          url: \"/analyze\"\n        });\n        // 최신순으로 정렬하기 위함.\n        const sortedList = response.data.sort((a, b) => b.id - a.id);\n        setRecommendList(sortedList);\n      } catch (error) {\n        if (error.response) {\n          const err = error.response.data;\n          //console.log(err);\n        }\n      }\n    };\n\n    reviewList();\n  }, []);\n  const goMypage = () => {\n    navigate(\"/mypage\");\n  };\n  const HistoryView = /*#__PURE__*/_jsxDEV(S.Container, {\n    children: /*#__PURE__*/_jsxDEV(S.Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(S.Title, {\n        children: \"\\uD604\\uC7AC\\uAE4C\\uC9C0 \\uCD94\\uCC9C\\uBC1B\\uC740 \\uC8FC\\uB958 \\uBAA9\\uB85D\\uC785\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(S.WhiteBox, {\n        children: [getCurrentPageItems().map(item => /*#__PURE__*/_jsxDEV(S.listStyle, {\n          children: item.date\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(S.ButtonContainer, {\n          children: [/*#__PURE__*/_jsxDEV(S.PageButton, {\n            onClick: goToPreviousPage,\n            disabled: page === 1,\n            children: \"\\uC774\\uC804 \\uD398\\uC774\\uC9C0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"\\uD398\\uC774\\uC9C0 \", page, \" / \", totalPages]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(S.PageButton, {\n            onClick: goToNextPage,\n            disabled: page === totalPages,\n            children: \"\\uB2E4\\uC74C \\uD398\\uC774\\uC9C0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(S.ReButton, {\n        onClick: goMypage,\n        children: \"\\uB9C8\\uC774\\uD398\\uC774\\uC9C0\\uB85C \\uB3CC\\uC544\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n  return HistoryView;\n}\n_s(History, \"WJA4jZKuwCEv/5FrM72zr9J7zJU=\", false, function () {\n  return [useNavigate];\n});\n_c = History;\nexport default History;\nvar _c;\n$RefreshReg$(_c, \"History\");","map":{"version":3,"names":["S","useNavigate","useLocaion","useState","useEffect","useDispatch","authClient","jsxDEV","_jsxDEV","History","_s","navigate","recommendList","setRecommendList","page","setPage","perPage","setPerPage","totalPages","Math","ceil","length","getCurrentPageItems","startIndex","endIndex","slice","goToNextPage","goToPreviousPage","reviewList","response","method","url","sortedList","data","sort","a","b","id","error","err","goMypage","HistoryView","Container","children","Wrapper","Title","fileName","_jsxFileName","lineNumber","columnNumber","WhiteBox","map","item","listStyle","date","ButtonContainer","PageButton","onClick","disabled","ReButton","_c","$RefreshReg$"],"sources":["C:/Users/Samsung/Desktop/BeJuRyu/2023_1_WAT_BeJuRyu/front/src/components/History/History.jsx"],"sourcesContent":["/* TODO\r\n1. [o] 주류 히스토리 페이지 대략적으로 어떻게 구현할 건지 UI*/\r\n\r\n// 리스트 형식으로 들어가고 onclick 시키게끔 깔끔하게 고\r\nimport S from \"./styled\";\r\nimport { useNavigate, useLocaion } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport authClient from \"../../apis/authClient\";\r\n\r\nfunction History() {\r\n  const navigate = useNavigate();\r\n\r\n  // 추천결과 리스트\r\n  const [recommendList, setRecommendList] = useState([]);\r\n  // 리스트 길이에 따라 pagination\r\n  const [page, setPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(10);\r\n  const totalPages = Math.ceil(recommendList.length / perPage);\r\n\r\n  // 현재 페이지에 해당하는 항목들만 추출하는 함수\r\n  const getCurrentPageItems = () => {\r\n    const startIndex = (page - 1) * perPage;\r\n    const endIndex = startIndex + perPage;\r\n    return recommendList.slice(startIndex, endIndex);\r\n  };\r\n\r\n  // 다음 페이지로 이동하는 함수\r\n  const goToNextPage = () => {\r\n    if (page < totalPages) {\r\n      setPage(page + 1);\r\n    }\r\n  };\r\n\r\n  // 이전 페이지로 이동하는 함수\r\n  const goToPreviousPage = () => {\r\n    if (page > 1) {\r\n      setPage(page - 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const reviewList = async () => {\r\n      try {\r\n        const response = await authClient({\r\n          method: \"get\",\r\n          url: \"/analyze\",\r\n        });\r\n        // 최신순으로 정렬하기 위함.\r\n        const sortedList = response.data.sort((a, b) => b.id - a.id);\r\n        setRecommendList(sortedList);\r\n      } catch (error) {\r\n        if (error.response) {\r\n          const err = error.response.data;\r\n          //console.log(err);\r\n        }\r\n      }\r\n    };\r\n    reviewList();\r\n  }, []);\r\n\r\n  const goMypage = () => {\r\n    navigate(\"/mypage\");\r\n  };\r\n\r\n  const HistoryView = (\r\n    <S.Container>\r\n      <S.Wrapper>\r\n        <S.Title>현재까지 추천받은 주류 목록입니다</S.Title>\r\n        <S.WhiteBox>\r\n          {getCurrentPageItems().map((item) => (\r\n            <S.listStyle key={item.id}>{item.date}</S.listStyle>\r\n          ))}\r\n          <S.ButtonContainer>\r\n            <S.PageButton onClick={goToPreviousPage} disabled={page === 1}>\r\n              이전 페이지\r\n            </S.PageButton>\r\n            <span>\r\n              페이지 {page} / {totalPages}\r\n            </span>\r\n            <S.PageButton onClick={goToNextPage} disabled={page === totalPages}>\r\n              다음 페이지\r\n            </S.PageButton>\r\n          </S.ButtonContainer>\r\n        </S.WhiteBox>\r\n        <S.ReButton onClick={goMypage}>마이페이지로 돌아가기</S.ReButton>\r\n      </S.Wrapper>\r\n    </S.Container>\r\n  );\r\n\r\n  return HistoryView;\r\n}\r\n\r\nexport default History;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}