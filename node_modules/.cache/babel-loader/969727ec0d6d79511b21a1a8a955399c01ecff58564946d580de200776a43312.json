{"ast":null,"code":"import axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport { Cookies } from \"react-cookie\";\nimport settingCookie from \"../utils/settingCookie\";\nconst authClient = axios.create({\n  // baseURL: \"http://localhost:8080\",\n  baseURL: \"http://141.164.49.27\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 토큰 만료 확인하기\n// const checkToken = async () => {\n//   console.log(\"check token 실행 중\");\n//   let token = settingCookie(\"get-access\");\n//   const exp = jwtDecode(token);\n//   if (Date.now() / 1000 > exp.exp) {\n//     console.log(\"해당 토큰은 만료됨\");\n//     await getNewToken();\n//   }\n// };\n\n// 새 토큰 발급\nconst getNewToken = async () => {\n  const access = settingCookie(\"get-access\");\n  const refresh = settingCookie(\"get-refresh\");\n  const cookie = new Cookies();\n  try {\n    const res = await axios({\n      method: \"post\",\n      url: \"api/auth/refresh\",\n      data: {\n        accessToken: access,\n        refreshToken: refresh\n      }\n    });\n    settingCookie(\"remove\");\n    cookie.set(\"accessToken\", res.data.token.access);\n    cookie.set(\"refreshToken\", res.data.token.refresh);\n    console.log(res.data);\n    return res.data.accessToken;\n  } catch (error) {\n    alert(\"error\");\n  }\n};\n\n// axios 요청 전 수행할 작업\nauthClient.interceptors.request.use(function (config) {\n  // 현재 토큰 가져오기\n  let token = settingCookie(\"get-access\");\n  const exp = jwtDecode(token);\n  // 토큰 만료여부 확인\n  if (Date.now() / 1000 > exp.exp) {\n    console.log(\"만료된 토큰\", token);\n    getNewToken().then(newToken => {\n      console.log(\"새 토큰\", newToken);\n      config.headers[\"Authorization\"] = `${newToken}`;\n    });\n  } else {\n    config.headers[\"Authorization\"] = `${token}`;\n  }\n  return config;\n});\nexport default authClient;","map":{"version":3,"names":["axios","jwtDecode","Cookies","settingCookie","authClient","create","baseURL","headers","getNewToken","access","refresh","cookie","res","method","url","data","accessToken","refreshToken","set","token","console","log","error","alert","interceptors","request","use","config","exp","Date","now","then","newToken"],"sources":["C:/Users/Samsung/Desktop/BeJuRyu/2023_1_WAT_BeJuRyu/front/src/apis/authClient.js"],"sourcesContent":["import axios from \"axios\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { Cookies } from \"react-cookie\";\r\n\r\nimport settingCookie from \"../utils/settingCookie\";\r\n\r\nconst authClient = axios.create({\r\n  // baseURL: \"http://localhost:8080\",\r\n  baseURL: \"http://141.164.49.27\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// 토큰 만료 확인하기\r\n// const checkToken = async () => {\r\n//   console.log(\"check token 실행 중\");\r\n//   let token = settingCookie(\"get-access\");\r\n//   const exp = jwtDecode(token);\r\n//   if (Date.now() / 1000 > exp.exp) {\r\n//     console.log(\"해당 토큰은 만료됨\");\r\n//     await getNewToken();\r\n//   }\r\n// };\r\n\r\n// 새 토큰 발급\r\nconst getNewToken = async () => {\r\n  const access = settingCookie(\"get-access\");\r\n  const refresh = settingCookie(\"get-refresh\");\r\n  const cookie = new Cookies();\r\n  try {\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: \"api/auth/refresh\",\r\n      data: {\r\n        accessToken: access,\r\n        refreshToken: refresh,\r\n      },\r\n    });\r\n    settingCookie(\"remove\");\r\n    cookie.set(\"accessToken\", res.data.token.access);\r\n    cookie.set(\"refreshToken\", res.data.token.refresh);\r\n    console.log(res.data);\r\n    return res.data.accessToken;\r\n  } catch (error) {\r\n    alert(\"error\");\r\n  }\r\n};\r\n\r\n// axios 요청 전 수행할 작업\r\nauthClient.interceptors.request.use(function (config) {\r\n  // 현재 토큰 가져오기\r\n  let token = settingCookie(\"get-access\");\r\n  const exp = jwtDecode(token);\r\n  // 토큰 만료여부 확인\r\n  if (Date.now() / 1000 > exp.exp) {\r\n    console.log(\"만료된 토큰\", token);\r\n    getNewToken().then((newToken) => {\r\n      console.log(\"새 토큰\", newToken);\r\n      config.headers[\"Authorization\"] = `${newToken}`;\r\n    });\r\n  } else {\r\n    config.headers[\"Authorization\"] = `${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport default authClient;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,cAAc;AAEtC,OAAOC,aAAa,MAAM,wBAAwB;AAElD,MAAMC,UAAU,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC9B;EACAC,OAAO,EAAE,sBAAsB;EAC/BC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,MAAMC,MAAM,GAAGN,aAAa,CAAC,YAAY,CAAC;EAC1C,MAAMO,OAAO,GAAGP,aAAa,CAAC,aAAa,CAAC;EAC5C,MAAMQ,MAAM,GAAG,IAAIT,OAAO,EAAE;EAC5B,IAAI;IACF,MAAMU,GAAG,GAAG,MAAMZ,KAAK,CAAC;MACtBa,MAAM,EAAE,MAAM;MACdC,GAAG,EAAE,kBAAkB;MACvBC,IAAI,EAAE;QACJC,WAAW,EAAEP,MAAM;QACnBQ,YAAY,EAAEP;MAChB;IACF,CAAC,CAAC;IACFP,aAAa,CAAC,QAAQ,CAAC;IACvBQ,MAAM,CAACO,GAAG,CAAC,aAAa,EAAEN,GAAG,CAACG,IAAI,CAACI,KAAK,CAACV,MAAM,CAAC;IAChDE,MAAM,CAACO,GAAG,CAAC,cAAc,EAAEN,GAAG,CAACG,IAAI,CAACI,KAAK,CAACT,OAAO,CAAC;IAClDU,OAAO,CAACC,GAAG,CAACT,GAAG,CAACG,IAAI,CAAC;IACrB,OAAOH,GAAG,CAACG,IAAI,CAACC,WAAW;EAC7B,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,KAAK,CAAC,OAAO,CAAC;EAChB;AACF,CAAC;;AAED;AACAnB,UAAU,CAACoB,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EACpD;EACA,IAAIR,KAAK,GAAGhB,aAAa,CAAC,YAAY,CAAC;EACvC,MAAMyB,GAAG,GAAG3B,SAAS,CAACkB,KAAK,CAAC;EAC5B;EACA,IAAIU,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,GAAGF,GAAG,CAACA,GAAG,EAAE;IAC/BR,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;IAC5BX,WAAW,EAAE,CAACuB,IAAI,CAAEC,QAAQ,IAAK;MAC/BZ,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEW,QAAQ,CAAC;MAC7BL,MAAM,CAACpB,OAAO,CAAC,eAAe,CAAC,GAAI,GAAEyB,QAAS,EAAC;IACjD,CAAC,CAAC;EACJ,CAAC,MAAM;IACLL,MAAM,CAACpB,OAAO,CAAC,eAAe,CAAC,GAAI,GAAEY,KAAM,EAAC;EAC9C;EACA,OAAOQ,MAAM;AACf,CAAC,CAAC;AAEF,eAAevB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}