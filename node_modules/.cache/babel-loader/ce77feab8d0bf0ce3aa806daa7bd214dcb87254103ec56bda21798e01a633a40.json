{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\Desktop\\\\BeJuRyu\\\\2023_1_WAT_BeJuRyu\\\\front\\\\src\\\\components\\\\Recommend\\\\Recommend.jsx\",\n  _s = $RefreshSig$();\n/* TODO\r\n1. 거의 완료\r\n2. [X] 이미지 첨부 후 서버와 통신할 때 json로 넘기는 방법 찾아볼 것.(facial-expression: string => base64 인코딩\r\n3. [X] 현재 줄글 작성 부분과 이미지 들어가는 게 따로 구현되있는데, 서버 넘길때 한 번에 넘겨야되므로 코드 합침 필요\r\n  => formData*/\nimport S from \"./styled\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport PhotoUpload from \"./PhotoUpload\";\nimport authClient from \"../../apis/authClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Recommend() {\n  _s();\n  const navigate = useNavigate();\n  const [jwtToken, setJwtToken] = useState(\"\");\n  const [imagePreview, setImagePreview] = useState(null);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\"); // 텍스트 입력값 상태 추가\n\n  const currentDate = getCurrentDateTime(); // 현재 시각 가져오기\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    navigate(\"/result\");\n    if (selectedFile) {\n      const reader = new FileReader();\n      // base64 encoding해서\n      reader.onloadend = async () => {\n        const arrayBuffer = reader.result;\n        const byteArray = new Uint8Array(arrayBuffer);\n        const base64Data = String(reader.result.split(\",\")[1]);\n        console.log(typeof base64Data);\n        console.log(currentDate);\n        //console.log(currentDate, typeof currentDate);\n        //console.log(inputValue, typeof inputValue);\n        //console.log(new Blob([byteArray]), typeof new Blob([byteArray]));\n\n        try {\n          const dataToSend = {\n            textExpression: inputValue,\n            facialExpression: base64Data,\n            date: currentDate\n          };\n          console.log(dataToSend); // 데이터 확인용\n          const res = await authClient({\n            method: \"post\",\n            url: \"/analyze/sources\",\n            data: {\n              dataToSend\n            }\n          });\n          if (res) {\n            console.log(res.data);\n            console.log(res.status); // HTTP 응답 상태 코드\n            console.log(res.statusText); // HTTP 응답 상태 텍스트\n            console.log(res.headers); // 응답 헤더 정보\n          }\n          // 서버 응답 처리\n        } catch (error) {\n          if (error.response) {\n            // 서버 응답 에러\n            const err = error.response.data;\n            console.log(err);\n            console.log(error.message);\n          }\n        }\n      };\n      reader.readAsDataURL(selectedFile);\n      // const userId = localStorage.getItem(\"user-id\");\n      // console.log(typeof parseInt(userId, 10));\n    }\n  };\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleFileChange = file => {\n    setSelectedFile(file);\n    //setInputValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(S.Container, {\n    children: /*#__PURE__*/_jsxDEV(S.Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(S.Title, {\n        children: \"\\uC8FC\\uB958 \\uCD94\\uCC9C\\uC744 \\uBC1B\\uAE30 \\uC704\\uD574\\uC11C \\uD544\\uC694\\uD55C \\uC815\\uBCF4\\uB97C \\uC54C\\uB824\\uC8FC\\uC138\\uC694!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(S.WhiteBox, {\n        children: [/*#__PURE__*/_jsxDEV(S.textInput, {\n          value: inputValue,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), inputValue === \"\" && /*#__PURE__*/_jsxDEV(S.MyState, {\n          children: \"\\uAE30\\uBD84\\uC774 \\uC5B4\\uB5A0\\uC2E0\\uAC00\\uC694? \\uAC10\\uC815\\uC774 \\uD45C\\uD604\\uB418\\uB294 \\uC5B8\\uC5B4\\uAC00 \\uB4E4\\uC5B4\\uAC00\\uC788\\uC73C\\uBA74 \\uC88B\\uC544\\uC694!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PhotoUpload, {\n        setSelectedFile: handleFileChange,\n        setImagePreview: setImagePreview,\n        imagePreview: imagePreview\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(S.SubmitButton, {\n        onClick: handleFormSubmit,\n        children: \"\\uBD84\\uC11D \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n// 현재 날짜와 시각을 \"yyyy.MM.dd HH:mm\" 형식으로 반환하는 함수\n_s(Recommend, \"wmiiSQGMuDoRfIkjV8fDF4D/zPM=\", false, function () {\n  return [useNavigate];\n});\n_c = Recommend;\nfunction getCurrentDateTime() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const hours = String(date.getHours()).padStart(2, \"0\");\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n  const formattedDateTime = `${year}-${month}-${day} ${hours}:${minutes}`;\n  return formattedDateTime;\n}\nexport default Recommend;\nvar _c;\n$RefreshReg$(_c, \"Recommend\");","map":{"version":3,"names":["S","useState","useNavigate","PhotoUpload","authClient","jsxDEV","_jsxDEV","Recommend","_s","navigate","jwtToken","setJwtToken","imagePreview","setImagePreview","selectedFile","setSelectedFile","inputValue","setInputValue","currentDate","getCurrentDateTime","handleFormSubmit","e","preventDefault","reader","FileReader","onloadend","arrayBuffer","result","byteArray","Uint8Array","base64Data","String","split","console","log","dataToSend","textExpression","facialExpression","date","res","method","url","data","status","statusText","headers","error","response","err","message","readAsDataURL","handleInputChange","target","value","handleFileChange","file","Container","children","Wrapper","Title","fileName","_jsxFileName","lineNumber","columnNumber","WhiteBox","textInput","onChange","MyState","SubmitButton","onClick","_c","Date","year","getFullYear","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","formattedDateTime","$RefreshReg$"],"sources":["C:/Users/Samsung/Desktop/BeJuRyu/2023_1_WAT_BeJuRyu/front/src/components/Recommend/Recommend.jsx"],"sourcesContent":["/* TODO\r\n1. 거의 완료\r\n2. [X] 이미지 첨부 후 서버와 통신할 때 json로 넘기는 방법 찾아볼 것.(facial-expression: string => base64 인코딩\r\n3. [X] 현재 줄글 작성 부분과 이미지 들어가는 게 따로 구현되있는데, 서버 넘길때 한 번에 넘겨야되므로 코드 합침 필요\r\n  => formData*/\r\nimport S from \"./styled\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport PhotoUpload from \"./PhotoUpload\";\r\nimport authClient from \"../../apis/authClient\";\r\n\r\nfunction Recommend() {\r\n  const navigate = useNavigate();\r\n  const [jwtToken, setJwtToken] = useState(\"\");\r\n  const [imagePreview, setImagePreview] = useState(null);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [inputValue, setInputValue] = useState(\"\"); // 텍스트 입력값 상태 추가\r\n\r\n  const currentDate = getCurrentDateTime(); // 현재 시각 가져오기\r\n  const handleFormSubmit = async (e) => {\r\n    e.preventDefault();\r\n    navigate(\"/result\");\r\n    if (selectedFile) {\r\n      const reader = new FileReader();\r\n      // base64 encoding해서\r\n      reader.onloadend = async () => {\r\n        const arrayBuffer = reader.result;\r\n        const byteArray = new Uint8Array(arrayBuffer);\r\n\r\n        const base64Data = String(reader.result.split(\",\")[1]);\r\n\r\n        console.log(typeof base64Data);\r\n\r\n        console.log(currentDate);\r\n        //console.log(currentDate, typeof currentDate);\r\n        //console.log(inputValue, typeof inputValue);\r\n        //console.log(new Blob([byteArray]), typeof new Blob([byteArray]));\r\n\r\n        try {\r\n          const dataToSend = {\r\n            textExpression: inputValue,\r\n            facialExpression: base64Data,\r\n            date: currentDate,\r\n          };\r\n          console.log(dataToSend); // 데이터 확인용\r\n          const res = await authClient({\r\n            method: \"post\",\r\n            url: \"/analyze/sources\",\r\n            data: {\r\n              dataToSend,\r\n            },\r\n          });\r\n          if (res) {\r\n            console.log(res.data);\r\n            console.log(res.status); // HTTP 응답 상태 코드\r\n            console.log(res.statusText); // HTTP 응답 상태 텍스트\r\n            console.log(res.headers); // 응답 헤더 정보\r\n          }\r\n          // 서버 응답 처리\r\n        } catch (error) {\r\n          if (error.response) {\r\n            // 서버 응답 에러\r\n            const err = error.response.data;\r\n            console.log(err);\r\n            console.log(error.message);\r\n          }\r\n        }\r\n      };\r\n\r\n      reader.readAsDataURL(selectedFile);\r\n      // const userId = localStorage.getItem(\"user-id\");\r\n      // console.log(typeof parseInt(userId, 10));\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleFileChange = (file) => {\r\n    setSelectedFile(file);\r\n    //setInputValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <S.Container>\r\n      <S.Wrapper>\r\n        <S.Title>주류 추천을 받기 위해서 필요한 정보를 알려주세요!</S.Title>\r\n        <S.WhiteBox>\r\n          <S.textInput value={inputValue} onChange={handleInputChange} />\r\n          {inputValue === \"\" && (\r\n            <S.MyState>\r\n              기분이 어떠신가요? 감정이 표현되는 언어가 들어가있으면 좋아요!\r\n            </S.MyState>\r\n          )}\r\n        </S.WhiteBox>\r\n        <PhotoUpload\r\n          setSelectedFile={handleFileChange}\r\n          setImagePreview={setImagePreview}\r\n          imagePreview={imagePreview}\r\n        />\r\n\r\n        <S.SubmitButton onClick={handleFormSubmit}>분석 시작</S.SubmitButton>\r\n      </S.Wrapper>\r\n    </S.Container>\r\n  );\r\n}\r\n\r\n// 현재 날짜와 시각을 \"yyyy.MM.dd HH:mm\" 형식으로 반환하는 함수\r\nfunction getCurrentDateTime() {\r\n  const date = new Date();\r\n\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  const hours = String(date.getHours()).padStart(2, \"0\");\r\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\r\n\r\n  const formattedDateTime = `${year}-${month}-${day} ${hours}:${minutes}`;\r\n\r\n  return formattedDateTime;\r\n}\r\n\r\nexport default Recommend;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}