{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Samsung/Desktop/BeJuRyu/2023_1_WAT_BeJuRyu/front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/Samsung/Desktop/BeJuRyu/2023_1_WAT_BeJuRyu/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import axios from\"axios\";import jwtDecode from\"jwt-decode\";import{Cookies}from\"react-cookie\";import settingCookie from\"../utils/settingCookie\";var authClient=axios.create({// baseURL: \"http://localhost:8080\",\nbaseURL:\"http://141.164.49.27\",headers:{\"Content-Type\":\"application/json\"}});var userId=parseInt(localStorage.getItem(\"user-id\"));// 새 토큰 발급\nvar getNewToken=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var access,refresh,cookie,res;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:access=settingCookie(\"get-access\");refresh=settingCookie(\"get-refresh\");cookie=new Cookies();_context.prev=3;_context.next=6;return axios({method:\"post\",url:\"http://141.164.49.27/auth/\".concat(userId),data:{accessToken:access,refreshToken:refresh}});case 6:res=_context.sent;settingCookie(\"remove\");cookie.set(\"accessToken\",res.data.accessToken);cookie.set(\"refreshToken\",res.data.refreshToken);console.log(res.data);return _context.abrupt(\"return\",res.data.accessToken);case 14:_context.prev=14;_context.t0=_context[\"catch\"](3);console.log(_context.t0);case 17:case\"end\":return _context.stop();}},_callee,null,[[3,14]]);}));return function getNewToken(){return _ref.apply(this,arguments);};}();// axios 요청 전 수행할 작업\nauthClient.interceptors.request.use(function(config){// 현재 토큰 가져오기\nvar token=settingCookie(\"get-access\");var exp=jwtDecode(token);// 토큰 만료여부 확인\nif(Date.now()/1000>exp.exp){//console.log(\"만료된 토큰\", token);\ngetNewToken().then(function(newToken){//console.log(\"새 토큰\", newToken);\nconfig.headers[\"Authorization\"]=\"Bearer \".concat(newToken);});}else{//console.log(\"토큰이 아직 만료 안됐어요!\");\nconfig.headers[\"Authorization\"]=\"Bearer \".concat(token);}return config;});export default authClient;","map":{"version":3,"names":["axios","jwtDecode","Cookies","settingCookie","authClient","create","baseURL","headers","userId","parseInt","localStorage","getItem","getNewToken","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","access","refresh","cookie","res","wrap","_callee$","_context","prev","next","method","url","concat","data","accessToken","refreshToken","sent","set","console","log","abrupt","t0","stop","apply","arguments","interceptors","request","use","config","token","exp","Date","now","then","newToken"],"sources":["C:/Users/Samsung/Desktop/BeJuRyu/2023_1_WAT_BeJuRyu/front/src/apis/authClient.js"],"sourcesContent":["import axios from \"axios\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { Cookies } from \"react-cookie\";\r\n\r\nimport settingCookie from \"../utils/settingCookie\";\r\n\r\nconst authClient = axios.create({\r\n  // baseURL: \"http://localhost:8080\",\r\n  baseURL: \"http://141.164.49.27\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\nconst userId = parseInt(localStorage.getItem(\"user-id\"));\r\n\r\n// 새 토큰 발급\r\nconst getNewToken = async () => {\r\n  const access = settingCookie(\"get-access\");\r\n  const refresh = settingCookie(\"get-refresh\");\r\n  const cookie = new Cookies();\r\n  try {\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: `http://141.164.49.27/auth/${userId}`,\r\n      data: {\r\n        accessToken: access,\r\n        refreshToken: refresh,\r\n      },\r\n    });\r\n    settingCookie(\"remove\");\r\n    cookie.set(\"accessToken\", res.data.accessToken);\r\n    cookie.set(\"refreshToken\", res.data.refreshToken);\r\n    console.log(res.data);\r\n    return res.data.accessToken;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// axios 요청 전 수행할 작업\r\nauthClient.interceptors.request.use(function (config) {\r\n  // 현재 토큰 가져오기\r\n  let token = settingCookie(\"get-access\");\r\n  const exp = jwtDecode(token);\r\n  // 토큰 만료여부 확인\r\n  if (Date.now() / 1000 > exp.exp) {\r\n    //console.log(\"만료된 토큰\", token);\r\n    getNewToken().then((newToken) => {\r\n      //console.log(\"새 토큰\", newToken);\r\n      config.headers[\"Authorization\"] = `Bearer ${newToken}`;\r\n    });\r\n  } else {\r\n    //console.log(\"토큰이 아직 만료 안됐어요!\");\r\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport default authClient;\r\n"],"mappings":"8SAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,SAAS,KAAM,YAAY,CAClC,OAASC,OAAO,KAAQ,cAAc,CAEtC,MAAO,CAAAC,aAAa,KAAM,wBAAwB,CAElD,GAAM,CAAAC,UAAU,CAAGJ,KAAK,CAACK,MAAM,CAAC,CAC9B;AACAC,OAAO,CAAE,sBAAsB,CAC/BC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,GAAM,CAAAC,MAAM,CAAGC,QAAQ,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,CAExD;AACA,GAAM,CAAAC,WAAW,6BAAAC,IAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAA,MAAAC,MAAA,CAAAC,OAAA,CAAAC,MAAA,CAAAC,GAAA,QAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SACZR,MAAM,CAAGf,aAAa,CAAC,YAAY,CAAC,CACpCgB,OAAO,CAAGhB,aAAa,CAAC,aAAa,CAAC,CACtCiB,MAAM,CAAG,GAAI,CAAAlB,OAAO,EAAE,CAAAsB,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA,SAER,CAAA1B,KAAK,CAAC,CACtB2B,MAAM,CAAE,MAAM,CACdC,GAAG,8BAAAC,MAAA,CAA+BrB,MAAM,CAAE,CAC1CsB,IAAI,CAAE,CACJC,WAAW,CAAEb,MAAM,CACnBc,YAAY,CAAEb,OAChB,CACF,CAAC,CAAC,QAPIE,GAAG,CAAAG,QAAA,CAAAS,IAAA,CAQT9B,aAAa,CAAC,QAAQ,CAAC,CACvBiB,MAAM,CAACc,GAAG,CAAC,aAAa,CAAEb,GAAG,CAACS,IAAI,CAACC,WAAW,CAAC,CAC/CX,MAAM,CAACc,GAAG,CAAC,cAAc,CAAEb,GAAG,CAACS,IAAI,CAACE,YAAY,CAAC,CACjDG,OAAO,CAACC,GAAG,CAACf,GAAG,CAACS,IAAI,CAAC,CAAC,OAAAN,QAAA,CAAAa,MAAA,UACfhB,GAAG,CAACS,IAAI,CAACC,WAAW,UAAAP,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAc,EAAA,CAAAd,QAAA,aAE3BW,OAAO,CAACC,GAAG,CAAAZ,QAAA,CAAAc,EAAA,CAAO,CAAC,yBAAAd,QAAA,CAAAe,IAAA,MAAAtB,OAAA,iBAEtB,kBArBK,CAAAL,WAAWA,CAAA,SAAAC,IAAA,CAAA2B,KAAA,MAAAC,SAAA,OAqBhB,CAED;AACArC,UAAU,CAACsC,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,SAAUC,MAAM,CAAE,CACpD;AACA,GAAI,CAAAC,KAAK,CAAG3C,aAAa,CAAC,YAAY,CAAC,CACvC,GAAM,CAAA4C,GAAG,CAAG9C,SAAS,CAAC6C,KAAK,CAAC,CAC5B;AACA,GAAIE,IAAI,CAACC,GAAG,EAAE,CAAG,IAAI,CAAGF,GAAG,CAACA,GAAG,CAAE,CAC/B;AACAnC,WAAW,EAAE,CAACsC,IAAI,CAAC,SAACC,QAAQ,CAAK,CAC/B;AACAN,MAAM,CAACtC,OAAO,CAAC,eAAe,CAAC,WAAAsB,MAAA,CAAasB,QAAQ,CAAE,CACxD,CAAC,CAAC,CACJ,CAAC,IAAM,CACL;AACAN,MAAM,CAACtC,OAAO,CAAC,eAAe,CAAC,WAAAsB,MAAA,CAAaiB,KAAK,CAAE,CACrD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CAAC,CAEF,cAAe,CAAAzC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}