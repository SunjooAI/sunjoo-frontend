{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\Desktop\\\\BeJuRyu\\\\2023_1_WAT_BeJuRyu\\\\front\\\\src\\\\components\\\\History\\\\History.jsx\",\n  _s = $RefreshSig$();\n/* TODO\r\n1. [o] 주류 히스토리 페이지 대략적으로 어떻게 구현할 건지 UI*/\n\n// 리스트 형식으로 들어가고 onclick 시키게끔 깔끔하게 고\nimport S from \"./styled\";\nimport { useNavigate, useLocaion } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction History() {\n  _s();\n  const navigate = useNavigate();\n\n  // 추천결과 리스트\n  const [recommendList, setRecommendList] = useState([]);\n  // 리스트 길이에 따라 pagination\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(4);\n  const totalPages = Math.ceil(recommendList.length / perPage);\n\n  // 현재 페이지에 해당하는 항목들만 추출하는 함수\n  const getCurrentPageItems = () => {\n    const startIndex = (page - 1) * perPage;\n    const endIndex = startIndex + perPage;\n    return drinkReviewList.slice(startIndex, endIndex);\n  };\n\n  // 다음 페이지로 이동하는 함수\n  const goToNextPage = () => {\n    if (page < totalPages) {\n      setPage(page + 1);\n    }\n  };\n\n  // 이전 페이지로 이동하는 함수\n  const goToPreviousPage = () => {\n    if (page > 1) {\n      setPage(page - 1);\n    }\n  };\n  const goMypage = () => {\n    navigate(\"/mypage\");\n  };\n  const HistoryView = /*#__PURE__*/_jsxDEV(S.Container, {\n    children: /*#__PURE__*/_jsxDEV(S.Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(S.Title, {\n        children: \"\\uD604\\uC7AC\\uAE4C\\uC9C0 \\uCD94\\uCC9C\\uBC1B\\uC740 \\uC8FC\\uB958 \\uBAA9\\uB85D\\uC785\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(S.WhiteBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(S.ReButton, {\n        onClick: goMypage,\n        children: \"\\uB9C8\\uC774\\uD398\\uC774\\uC9C0\\uB85C \\uB3CC\\uC544\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n  return HistoryView;\n}\n_s(History, \"fcXnu2Z4kkd71xzrJHdmcKh1wJM=\", false, function () {\n  return [useNavigate];\n});\n_c = History;\nexport default History;\nvar _c;\n$RefreshReg$(_c, \"History\");","map":{"version":3,"names":["S","useNavigate","useLocaion","useState","useEffect","useDispatch","jsxDEV","_jsxDEV","History","_s","navigate","recommendList","setRecommendList","page","setPage","perPage","setPerPage","totalPages","Math","ceil","length","getCurrentPageItems","startIndex","endIndex","drinkReviewList","slice","goToNextPage","goToPreviousPage","goMypage","HistoryView","Container","children","Wrapper","Title","fileName","_jsxFileName","lineNumber","columnNumber","WhiteBox","ReButton","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Samsung/Desktop/BeJuRyu/2023_1_WAT_BeJuRyu/front/src/components/History/History.jsx"],"sourcesContent":["/* TODO\r\n1. [o] 주류 히스토리 페이지 대략적으로 어떻게 구현할 건지 UI*/\r\n\r\n// 리스트 형식으로 들어가고 onclick 시키게끔 깔끔하게 고\r\nimport S from \"./styled\";\r\nimport { useNavigate, useLocaion } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction History() {\r\n  const navigate = useNavigate();\r\n\r\n  // 추천결과 리스트\r\n  const [recommendList, setRecommendList] = useState([]);\r\n  // 리스트 길이에 따라 pagination\r\n  const [page, setPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(4);\r\n  const totalPages = Math.ceil(recommendList.length / perPage);\r\n\r\n  // 현재 페이지에 해당하는 항목들만 추출하는 함수\r\n  const getCurrentPageItems = () => {\r\n    const startIndex = (page - 1) * perPage;\r\n    const endIndex = startIndex + perPage;\r\n    return drinkReviewList.slice(startIndex, endIndex);\r\n  };\r\n\r\n  // 다음 페이지로 이동하는 함수\r\n  const goToNextPage = () => {\r\n    if (page < totalPages) {\r\n      setPage(page + 1);\r\n    }\r\n  };\r\n\r\n  // 이전 페이지로 이동하는 함수\r\n  const goToPreviousPage = () => {\r\n    if (page > 1) {\r\n      setPage(page - 1);\r\n    }\r\n  };\r\n\r\n  const goMypage = () => {\r\n    navigate(\"/mypage\");\r\n  };\r\n  const HistoryView = (\r\n    <S.Container>\r\n      <S.Wrapper>\r\n        <S.Title>현재까지 추천받은 주류 목록입니다</S.Title>\r\n        <S.WhiteBox></S.WhiteBox>\r\n        <S.ReButton onClick={goMypage}>마이페이지로 돌아가기</S.ReButton>\r\n      </S.Wrapper>\r\n    </S.Container>\r\n  );\r\n\r\n  return HistoryView;\r\n}\r\n\r\nexport default History;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA,OAAOA,CAAC,MAAM,UAAU;AACxB,SAASC,WAAW,EAAEC,UAAU,QAAQ,kBAAkB;AAC1D,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGT,WAAW,EAAE;;EAE9B;EACA,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD;EACA,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAMc,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACR,aAAa,CAACS,MAAM,GAAGL,OAAO,CAAC;;EAE5D;EACA,MAAMM,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,UAAU,GAAG,CAACT,IAAI,GAAG,CAAC,IAAIE,OAAO;IACvC,MAAMQ,QAAQ,GAAGD,UAAU,GAAGP,OAAO;IACrC,OAAOS,eAAe,CAACC,KAAK,CAACH,UAAU,EAAEC,QAAQ,CAAC;EACpD,CAAC;;EAED;EACA,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIb,IAAI,GAAGI,UAAU,EAAE;MACrBH,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMc,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAId,IAAI,GAAG,CAAC,EAAE;MACZC,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;IACnB;EACF,CAAC;EAED,MAAMe,QAAQ,GAAGA,CAAA,KAAM;IACrBlB,QAAQ,CAAC,SAAS,CAAC;EACrB,CAAC;EACD,MAAMmB,WAAW,gBACftB,OAAA,CAACP,CAAC,CAAC8B,SAAS;IAAAC,QAAA,eACVxB,OAAA,CAACP,CAAC,CAACgC,OAAO;MAAAD,QAAA,gBACRxB,OAAA,CAACP,CAAC,CAACiC,KAAK;QAAAF,QAAA,EAAC;MAAkB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAU,eACrC9B,OAAA,CAACP,CAAC,CAACsC,QAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAc,eACzB9B,OAAA,CAACP,CAAC,CAACuC,QAAQ;QAACC,OAAO,EAAEZ,QAAS;QAAAG,QAAA,EAAC;MAAW;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAa;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAC7C;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEf;EAED,OAAOR,WAAW;AACpB;AAACpB,EAAA,CA7CQD,OAAO;EAAA,QACGP,WAAW;AAAA;AAAAwC,EAAA,GADrBjC,OAAO;AA+ChB,eAAeA,OAAO;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}