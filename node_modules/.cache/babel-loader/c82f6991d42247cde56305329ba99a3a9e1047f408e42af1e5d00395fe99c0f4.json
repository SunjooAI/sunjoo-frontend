{"ast":null,"code":"import axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport { Cookies } from \"react-cookie\";\nimport settingCookie from \"../utils/settingCookie\";\nconst authClient = axios.create({\n  // baseURL: \"http://localhost:8080\",\n  baseURL: \"http://141.164.49.27\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nconst userId = localStorage.getItem(\"user-id\");\n\n// 새 토큰 발급\nconst getNewToken = async () => {\n  const access = settingCookie(\"get-access\");\n  const refresh = settingCookie(\"get-refresh\");\n  const cookie = new Cookies();\n  try {\n    const res = await axios({\n      method: \"post\",\n      url: `auth/${userId}`,\n      data: {\n        accessToken: access,\n        refreshToken: refresh\n      }\n    });\n    settingCookie(\"remove\");\n    cookie.set(\"accessToken\", res.data.accessToken);\n    cookie.set(\"refreshToken\", res.data.refreshToken);\n    console.log(res.data);\n    return res.data.accessToken;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// axios 요청 전 수행할 작업\nauthClient.interceptors.request.use(function (config) {\n  // 현재 토큰 가져오기\n  let token = settingCookie(\"get-access\");\n  const exp = jwtDecode(token);\n  // 토큰 만료여부 확인\n  if (Date.now() / 1000 > exp.exp) {\n    //console.log(\"만료된 토큰\", token);\n    getNewToken().then(newToken => {\n      //console.log(\"새 토큰\", newToken);\n      config.headers[\"Authorization\"] = `Bearer ${newToken}`;\n    });\n  } else {\n    //console.log(\"토큰이 아직 만료 안됐어요!\");\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n});\nexport default authClient;","map":{"version":3,"names":["axios","jwtDecode","Cookies","settingCookie","authClient","create","baseURL","headers","userId","localStorage","getItem","getNewToken","access","refresh","cookie","res","method","url","data","accessToken","refreshToken","set","console","log","error","interceptors","request","use","config","token","exp","Date","now","then","newToken"],"sources":["C:/Users/Samsung/Desktop/BeJuRyu/2023_1_WAT_BeJuRyu/front/src/apis/authClient.js"],"sourcesContent":["import axios from \"axios\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { Cookies } from \"react-cookie\";\r\n\r\nimport settingCookie from \"../utils/settingCookie\";\r\n\r\nconst authClient = axios.create({\r\n  // baseURL: \"http://localhost:8080\",\r\n  baseURL: \"http://141.164.49.27\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\nconst userId = localStorage.getItem(\"user-id\");\r\n\r\n// 새 토큰 발급\r\nconst getNewToken = async () => {\r\n  const access = settingCookie(\"get-access\");\r\n  const refresh = settingCookie(\"get-refresh\");\r\n  const cookie = new Cookies();\r\n  try {\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: `auth/${userId}`,\r\n      data: {\r\n        accessToken: access,\r\n        refreshToken: refresh,\r\n      },\r\n    });\r\n    settingCookie(\"remove\");\r\n    cookie.set(\"accessToken\", res.data.accessToken);\r\n    cookie.set(\"refreshToken\", res.data.refreshToken);\r\n    console.log(res.data);\r\n    return res.data.accessToken;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// axios 요청 전 수행할 작업\r\nauthClient.interceptors.request.use(function (config) {\r\n  // 현재 토큰 가져오기\r\n  let token = settingCookie(\"get-access\");\r\n  const exp = jwtDecode(token);\r\n  // 토큰 만료여부 확인\r\n  if (Date.now() / 1000 > exp.exp) {\r\n    //console.log(\"만료된 토큰\", token);\r\n    getNewToken().then((newToken) => {\r\n      //console.log(\"새 토큰\", newToken);\r\n      config.headers[\"Authorization\"] = `Bearer ${newToken}`;\r\n    });\r\n  } else {\r\n    //console.log(\"토큰이 아직 만료 안됐어요!\");\r\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport default authClient;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,cAAc;AAEtC,OAAOC,aAAa,MAAM,wBAAwB;AAElD,MAAMC,UAAU,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC9B;EACAC,OAAO,EAAE,sBAAsB;EAC/BC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;;AAE9C;AACA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,MAAMC,MAAM,GAAGT,aAAa,CAAC,YAAY,CAAC;EAC1C,MAAMU,OAAO,GAAGV,aAAa,CAAC,aAAa,CAAC;EAC5C,MAAMW,MAAM,GAAG,IAAIZ,OAAO,EAAE;EAC5B,IAAI;IACF,MAAMa,GAAG,GAAG,MAAMf,KAAK,CAAC;MACtBgB,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,QAAOT,MAAO,EAAC;MACrBU,IAAI,EAAE;QACJC,WAAW,EAAEP,MAAM;QACnBQ,YAAY,EAAEP;MAChB;IACF,CAAC,CAAC;IACFV,aAAa,CAAC,QAAQ,CAAC;IACvBW,MAAM,CAACO,GAAG,CAAC,aAAa,EAAEN,GAAG,CAACG,IAAI,CAACC,WAAW,CAAC;IAC/CL,MAAM,CAACO,GAAG,CAAC,cAAc,EAAEN,GAAG,CAACG,IAAI,CAACE,YAAY,CAAC;IACjDE,OAAO,CAACC,GAAG,CAACR,GAAG,CAACG,IAAI,CAAC;IACrB,OAAOH,GAAG,CAACG,IAAI,CAACC,WAAW;EAC7B,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;EACpB;AACF,CAAC;;AAED;AACApB,UAAU,CAACqB,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EACpD;EACA,IAAIC,KAAK,GAAG1B,aAAa,CAAC,YAAY,CAAC;EACvC,MAAM2B,GAAG,GAAG7B,SAAS,CAAC4B,KAAK,CAAC;EAC5B;EACA,IAAIE,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,GAAGF,GAAG,CAACA,GAAG,EAAE;IAC/B;IACAnB,WAAW,EAAE,CAACsB,IAAI,CAAEC,QAAQ,IAAK;MAC/B;MACAN,MAAM,CAACrB,OAAO,CAAC,eAAe,CAAC,GAAI,UAAS2B,QAAS,EAAC;IACxD,CAAC,CAAC;EACJ,CAAC,MAAM;IACL;IACAN,MAAM,CAACrB,OAAO,CAAC,eAAe,CAAC,GAAI,UAASsB,KAAM,EAAC;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,eAAexB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}