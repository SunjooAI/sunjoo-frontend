{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\Desktop\\\\BeJuRyu\\\\2023_1_WAT_BeJuRyu\\\\front\\\\src\\\\components\\\\Recommend\\\\Recommend.jsx\",\n  _s = $RefreshSig$();\n/* TODO\r\n1. 거의 완료\r\n2. [X] 이미지 첨부 후 서버와 통신할 때 json로 넘기는 방법 찾아볼 것.(facial-expression: string => base64 인코딩\r\n3. [X] 현재 줄글 작성 부분과 이미지 들어가는 게 따로 구현되있는데, 서버 넘길때 한 번에 넘겨야되므로 코드 합침 필요\r\n  => formData*/\nimport S from \"./styled\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport PhotoUpload from \"./PhotoUpload\";\nimport authClient from \"../../apis/authClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Recommend() {\n  _s();\n  const navigate = useNavigate();\n  const [jwtToken, setJwtToken] = useState(\"\");\n  const [imagePreview, setImagePreview] = useState(null);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\"); // 텍스트 입력값 상태 추가\n\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    navigate(\"/result\");\n    if (selectedFile) {\n      const reader = new FileReader();\n      // base64 encoding해서\n      reader.onloadend = async e => {\n        //const arrayBuffer = reader.result;\n        //const byteArray = new Uint8Array(arrayBuffer);\n\n        const base64Data = String(reader.result.split(\",\")[1]);\n        try {\n          const currentDate = getCurrentDateTime(); // 현재 시각 가져오기\n          const res = await authClient({\n            method: \"post\",\n            url: `/analyze/sources`,\n            data: {\n              textExpression: inputValue,\n              facialExpression: base64Data,\n              date: currentDate\n            }\n          });\n          if (res) {\n            console.log(res.data);\n          }\n          // 서버 응답 처리\n        } catch (error) {\n          if (error.response) {\n            // 서버 응답 에러\n            const err = error.response.data;\n            console.log(err);\n            //console.log(err);\n            console.log(error.message);\n          } else {\n            // 네트워크 에러 또는 클라이언트 에러\n            console.log(\"Error:\", error.message);\n          }\n        }\n        console.log(\"왜 안돼!\");\n        reader.readAsDataURL(selectedFile);\n      };\n\n      // const userId = localStorage.getItem(\"user-id\");\n      // console.log(typeof parseInt(userId, 10));\n    }\n  };\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleFileChange = file => {\n    setSelectedFile(file);\n    //setInputValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(S.Container, {\n    children: /*#__PURE__*/_jsxDEV(S.Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(S.Title, {\n        children: \"\\uC8FC\\uB958 \\uCD94\\uCC9C\\uC744 \\uBC1B\\uAE30 \\uC704\\uD574\\uC11C \\uD544\\uC694\\uD55C \\uC815\\uBCF4\\uB97C \\uC54C\\uB824\\uC8FC\\uC138\\uC694!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(S.WhiteBox, {\n        children: [/*#__PURE__*/_jsxDEV(S.textInput, {\n          value: inputValue,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), inputValue === \"\" && /*#__PURE__*/_jsxDEV(S.MyState, {\n          children: \"\\uAE30\\uBD84\\uC774 \\uC5B4\\uB5A0\\uC2E0\\uAC00\\uC694? \\uAC10\\uC815\\uC774 \\uD45C\\uD604\\uB418\\uB294 \\uC5B8\\uC5B4\\uAC00 \\uB4E4\\uC5B4\\uAC00\\uC788\\uC73C\\uBA74 \\uC88B\\uC544\\uC694!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PhotoUpload, {\n        setSelectedFile: handleFileChange,\n        setImagePreview: setImagePreview,\n        imagePreview: imagePreview\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(S.SubmitButton, {\n        onClick: handleFormSubmit,\n        children: \"\\uBD84\\uC11D \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n// 현재 날짜와 시각을 \"yyyy.MM.dd HH:mm\" 형식으로 반환하는 함수\n_s(Recommend, \"wmiiSQGMuDoRfIkjV8fDF4D/zPM=\", false, function () {\n  return [useNavigate];\n});\n_c = Recommend;\nfunction getCurrentDateTime() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const hours = String(date.getHours()).padStart(2, \"0\");\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n  const formattedDateTime = `${year}-${month}-${day} ${hours}:${minutes}`;\n  return formattedDateTime;\n}\nexport default Recommend;\nvar _c;\n$RefreshReg$(_c, \"Recommend\");","map":{"version":3,"names":["S","useState","useNavigate","PhotoUpload","authClient","jsxDEV","_jsxDEV","Recommend","_s","navigate","jwtToken","setJwtToken","imagePreview","setImagePreview","selectedFile","setSelectedFile","inputValue","setInputValue","handleFormSubmit","e","preventDefault","reader","FileReader","onloadend","base64Data","String","result","split","currentDate","getCurrentDateTime","res","method","url","data","textExpression","facialExpression","date","console","log","error","response","err","message","readAsDataURL","handleInputChange","target","value","handleFileChange","file","Container","children","Wrapper","Title","fileName","_jsxFileName","lineNumber","columnNumber","WhiteBox","textInput","onChange","MyState","SubmitButton","onClick","_c","Date","year","getFullYear","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","formattedDateTime","$RefreshReg$"],"sources":["C:/Users/Samsung/Desktop/BeJuRyu/2023_1_WAT_BeJuRyu/front/src/components/Recommend/Recommend.jsx"],"sourcesContent":["/* TODO\r\n1. 거의 완료\r\n2. [X] 이미지 첨부 후 서버와 통신할 때 json로 넘기는 방법 찾아볼 것.(facial-expression: string => base64 인코딩\r\n3. [X] 현재 줄글 작성 부분과 이미지 들어가는 게 따로 구현되있는데, 서버 넘길때 한 번에 넘겨야되므로 코드 합침 필요\r\n  => formData*/\r\nimport S from \"./styled\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport PhotoUpload from \"./PhotoUpload\";\r\nimport authClient from \"../../apis/authClient\";\r\n\r\nfunction Recommend() {\r\n  const navigate = useNavigate();\r\n  const [jwtToken, setJwtToken] = useState(\"\");\r\n  const [imagePreview, setImagePreview] = useState(null);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [inputValue, setInputValue] = useState(\"\"); // 텍스트 입력값 상태 추가\r\n\r\n  const handleFormSubmit = async (e) => {\r\n    e.preventDefault();\r\n    navigate(\"/result\");\r\n    if (selectedFile) {\r\n      const reader = new FileReader();\r\n      // base64 encoding해서\r\n      reader.onloadend = async (e) => {\r\n        //const arrayBuffer = reader.result;\r\n        //const byteArray = new Uint8Array(arrayBuffer);\r\n\r\n        const base64Data = String(reader.result.split(\",\")[1]);\r\n\r\n        try {\r\n          const currentDate = getCurrentDateTime(); // 현재 시각 가져오기\r\n          const res = await authClient({\r\n            method: \"post\",\r\n            url: `/analyze/sources`,\r\n            data: {\r\n              textExpression: inputValue,\r\n              facialExpression: base64Data,\r\n              date: currentDate,\r\n            },\r\n          });\r\n\r\n          if (res) {\r\n            console.log(res.data);\r\n          }\r\n          // 서버 응답 처리\r\n        } catch (error) {\r\n          if (error.response) {\r\n            // 서버 응답 에러\r\n            const err = error.response.data;\r\n            console.log(err);\r\n            //console.log(err);\r\n            console.log(error.message);\r\n          } else {\r\n            // 네트워크 에러 또는 클라이언트 에러\r\n            console.log(\"Error:\", error.message);\r\n          }\r\n        }\r\n        console.log(\"왜 안돼!\");\r\n        reader.readAsDataURL(selectedFile);\r\n      };\r\n\r\n      // const userId = localStorage.getItem(\"user-id\");\r\n      // console.log(typeof parseInt(userId, 10));\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleFileChange = (file) => {\r\n    setSelectedFile(file);\r\n    //setInputValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <S.Container>\r\n      <S.Wrapper>\r\n        <S.Title>주류 추천을 받기 위해서 필요한 정보를 알려주세요!</S.Title>\r\n        <S.WhiteBox>\r\n          <S.textInput value={inputValue} onChange={handleInputChange} />\r\n          {inputValue === \"\" && (\r\n            <S.MyState>\r\n              기분이 어떠신가요? 감정이 표현되는 언어가 들어가있으면 좋아요!\r\n            </S.MyState>\r\n          )}\r\n        </S.WhiteBox>\r\n        <PhotoUpload\r\n          setSelectedFile={handleFileChange}\r\n          setImagePreview={setImagePreview}\r\n          imagePreview={imagePreview}\r\n        />\r\n\r\n        <S.SubmitButton onClick={handleFormSubmit}>분석 시작</S.SubmitButton>\r\n      </S.Wrapper>\r\n    </S.Container>\r\n  );\r\n}\r\n\r\n// 현재 날짜와 시각을 \"yyyy.MM.dd HH:mm\" 형식으로 반환하는 함수\r\nfunction getCurrentDateTime() {\r\n  const date = new Date();\r\n\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  const hours = String(date.getHours()).padStart(2, \"0\");\r\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\r\n\r\n  const formattedDateTime = `${year}-${month}-${day} ${hours}:${minutes}`;\r\n\r\n  return formattedDateTime;\r\n}\r\n\r\nexport default Recommend;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}